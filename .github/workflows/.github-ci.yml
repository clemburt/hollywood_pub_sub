name: CI Pipeline

on:
  # Trigger the pipeline on push to any branch
  push:
    # Run on push to any branch
    branches:
      - '**'
  # Trigger the pipeline on pull requests to any branch
  pull_request:
    # Run on PRs to any branch
    branches:
      - '**'
  # Allow manual triggering of the pipeline
  workflow_dispatch:

jobs:
  build:
    name: üêã Build and push Docker Image
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Authenticate to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build the Docker image (pull base image to ensure freshness)
      - name: Build Docker image
        run: docker build --pull -t ghcr.io/clemburt/hollywood_pub_sub:latest .

      # Push to GHCR
      - name: Push Docker image
        run: docker push ghcr.io/clemburt/hollywood_pub_sub:latest

  run_main:
    name: üñ•Ô∏è Run Main (Group)
    runs-on: ubuntu-latest
    # This job depends on the build job
    needs: build
    if: |
      github.ref == 'refs/heads/main' ||
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.base.ref == 'main' &&
        contains(github.event.pull_request.labels.*.name, 'CICD')
      )
    container:
      image: ghcr.io/clemburt/hollywood_pub_sub:latest

    steps:
      - name: Group placeholder
        run: echo "Run Main group triggered - delegating to children..."

  run_main_api:
    name: üñ•Ô∏èüõú Run Main CLI - API
    runs-on: ubuntu-latest
    # This job depends on the run_main job
    needs: run_main
    container:
      image: ghcr.io/clemburt/hollywood_pub_sub:latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      - name: Run CLI - API
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          hollywood_pub_sub run \
            --api_key "$TMDB_API_KEY" \
            --max_movies_per_composer 10 \
            --winning_threshold 3

  run_main_json:
    name: üñ•Ô∏èüóíÔ∏è Run Main CLI - JSON
    runs-on: ubuntu-latest
    # This job depends on the run_main job
    needs: run_main
    container:
      image: ghcr.io/clemburt/hollywood_pub_sub:latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      - name: Run CLI - JSON
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          hollywood_pub_sub run \
            --json_path src/hollywood_pub_sub/movie_database.json \
            --max_movies_per_composer 10 \
            --winning_threshold 3

  test:
    name: üß™ Run tests
    runs-on: ubuntu-latest
    # This job depends on the build job
    needs: build
    container:
      image: ghcr.io/clemburt/hollywood_pub_sub:latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      - name: Run tests with PDM
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          pdm install -dG test
          pdm test

  doc:
    name: üìö Build and deploy Docs
    runs-on: ubuntu-latest
    # This job depends on the build job
    needs: build
    if: |
      github.ref == 'refs/heads/main' ||
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.base.ref == 'main' &&
        contains(github.event.pull_request.labels.*.name, 'documentation')
      )
    container:
      image: ghcr.io/clemburt/hollywood_pub_sub:latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Install git explicitly to support GitHub Pages deployment (required by peaceiris/actions-gh-pages)
      - name: Install git
        run: apk add --no-cache git

      - name: Build documentation with PDM
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          pdm install -dG doc
          pdm doc

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build
          publish_branch: gh-pages

  lint:
    name: ü©∫ Lint source code
    runs-on: ubuntu-latest
    # This job depends on the build job
    needs: build
    container:
      image: ghcr.io/clemburt/hollywood_pub_sub:latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      - name: Run linting with PDM
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          pdm install -dG lint
          pdm lint

  clean:
    name: üßπ Clean Docker images and containers
    runs-on: ubuntu-latest
    needs: [build, api-rest, test, doc, lint]
    # This ensures it runs even if previous jobs failed
    if: always()
    steps:
      - name: Clean up unused Docker images and containers
        run: |
          echo "Cleaning up unused Docker images and containers"
          docker system prune -af
