name: CI Pipeline

on:
  push:
    branches:
      - '**'          # Trigger on push to any branch
  pull_request:
    branches:
      - '**'          # Trigger on PRs to any branch
  workflow_dispatch:   # Allow manual trigger from GitHub UI

env:
  IMAGE_NAME: ghcr.io/clemburt/hollywood_pub_sub:latest  # Docker image name and tag

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checkout source code

      # Authenticate to GitHub Container Registry (GHCR)
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build the Docker image with the specified tag
      - name: Build Docker image
        run: docker build --pull -t ${{ env.IMAGE_NAME }} .

      # Push the built image to GHCR
      - name: Push Docker image
        run: docker push ${{ env.IMAGE_NAME }}

  test:
    name: Run Tests in Docker Container
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3  # Checkout source code

      # Run tests using the predefined PDM script (pdm test)
      - name: Run tests with pdm
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}  # Pass TMDB API key
        run: |
          docker run --rm \
            -e TMDB_API_KEY="${{ secrets.TMDB_API_KEY }}" \
            ${{ env.IMAGE_NAME }} \
            pdm test

  run_main:
    name: Run Main Script
    runs-on: ubuntu-latest
    needs: build
    # Only run on main branch pushes or PRs targeting main with 'CICD' label
    if: |
      github.ref == 'refs/heads/main' ||
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.base.ref == 'main' &&
        contains(github.event.pull_request.labels.*.name, 'CICD')
      )
    steps:
      - uses: actions/checkout@v3  # Checkout source code

      # Run the main CLI command from the ENTRYPOINT
      - name: Run main CLI command
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          docker run --rm \
            -e TMDB_API_KEY="${{ secrets.TMDB_API_KEY }}" \
            ${{ env.IMAGE_NAME }} \
            run --api_key "$TMDB_API_KEY" --max_movies_per_composer 10 --winning_threshold 5
