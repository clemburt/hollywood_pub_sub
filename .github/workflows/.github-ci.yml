name: CI Pipeline

on:
  push:
    branches:
      - '**'  # Trigger on push to any branch
  pull_request:
    branches:
      - '**'  # Trigger on pull request targeting any branch
  workflow_dispatch:  # Allow manual trigger of workflow

env:
  IMAGE_NAME: ghcr.io/clemburt/hollywood_pub_sub:latest  # Docker image name with GitHub Container Registry path

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checkout repository code

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME .  # Build the Docker image from the Dockerfile

      - name: Push Docker image
        run: docker push $IMAGE_NAME  # Push the built image to GitHub Container Registry

  test:
    name: Run Tests in Docker Container
    runs-on: ubuntu-latest
    needs: build  # Run this job only after the image has been built
    steps:
      - uses: actions/checkout@v3

      - name: Run tests inside the Docker container
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          docker run --rm \
            -e TMDB_API_KEY="${{ secrets.TMDB_API_KEY }}" \
            ${{ env.IMAGE_NAME }} \
            pdm run test

  run_main:
    name: Run Main Script
    runs-on: ubuntu-latest
    needs: build  # Run after the Docker image is built
    # Run if:
    # - this is a push to main branch
    # OR
    # - this is a pull request targeting main that has the "CICD" label
    if: |
      github.ref == 'refs/heads/main' ||
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.base.ref == 'main' &&
        contains(github.event.pull_request.labels.*.name, 'CICD')
      )
    steps:
      - uses: actions/checkout@v3

      - name: Run main script using CLI entry point
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          docker run --rm \
            -e TMDB_API_KEY="${{ secrets.TMDB_API_KEY }}" \
            ${{ env.IMAGE_NAME }} \
            hollywood_pub_sub --api_key "$TMDB_API_KEY" --max_movies_per_composer 10 --winning_threshold 5
